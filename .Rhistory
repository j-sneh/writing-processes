clusters_single <- cutree(hclust_single, h = 75)
# Display cluster sizes
table(clusters_single)
# Perform hierarchical clustering with complete linkage
hclust_complete <- hclust(dist(gene_expression_data), method = "complete")
# Plot dendrogram
plot(hclust_complete, main = "Hierarchical Clustering (Complete Linkage)", sub = "")
rect.hclust(hclust_complete, h = 140, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_complete <- cutree(hclust_complete, h = 140)
# Display cluster sizes
table(clusters_complete)
# Perform hierarchical clustering with average linkage
hclust_average <- hclust(dist(gene_expression_data), method = "average")
# Plot dendrogram
plot(hclust_average, main = "Hierarchical Clustering (Average Linkage)", sub = "")
rect.hclust(hclust_average, h = 100, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_average <- cutree(hclust_average, h = 100)
# Display cluster sizes
table(clusters_average)
# Extract gene expression data
gene_expression_data <- golub[, 2:ncol(golub)]
# Perform hierarchical clustering with single linkage
hclust_single <- hclust(dist(gene_expression_data), method = "single")
# Plot dendrogram
plot(hclust_single, main = "Hierarchical Clustering (Single Linkage)", sub = "")
rect.hclust(hclust_single, h = 100, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_single <- cutree(hclust_single, h = 75)
# Display cluster sizes
table(clusters_single)
# Perform hierarchical clustering with complete linkage
hclust_complete <- hclust(dist(gene_expression_data), method = "complete")
# Plot dendrogram
plot(hclust_complete, main = "Hierarchical Clustering (Complete Linkage)", sub = "")
rect.hclust(hclust_complete, h = 140, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_complete <- cutree(hclust_complete, h = 140)
# Display cluster sizes
table(clusters_complete)
# Perform hierarchical clustering with average linkage
hclust_average <- hclust(dist(gene_expression_data), method = "average")
# Plot dendrogram
plot(hclust_average, main = "Hierarchical Clustering (Average Linkage)", sub = "")
rect.hclust(hclust_average, h = 100, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_average <- cutree(hclust_average, h = 100)
# Display cluster sizes
table(clusters_average)
# Extract gene expression data
gene_expression_data <- golub[, 2:ncol(golub)]
# Perform hierarchical clustering with single linkage
hclust_single <- hclust(dist(gene_expression_data), method = "single")
# Plot dendrogram
plot(hclust_single, main = "Hierarchical Clustering (Single Linkage)", sub = "")
rect.hclust(hclust_single, h = 100, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_single <- cutree(hclust_single, h = 100)
# Display cluster sizes
table(clusters_single)
# Perform hierarchical clustering with complete linkage
hclust_complete <- hclust(dist(gene_expression_data), method = "complete")
# Plot dendrogram
plot(hclust_complete, main = "Hierarchical Clustering (Complete Linkage)", sub = "")
rect.hclust(hclust_complete, h = 140, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_complete <- cutree(hclust_complete, h = 140)
# Display cluster sizes
table(clusters_complete)
# Perform hierarchical clustering with average linkage
hclust_average <- hclust(dist(gene_expression_data), method = "average")
# Plot dendrogram
plot(hclust_average, main = "Hierarchical Clustering (Average Linkage)", sub = "")
rect.hclust(hclust_average, h = 100, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_average <- cutree(hclust_average, h = 100)
# Display cluster sizes
table(clusters_average)
# Extract gene expression data
gene_expression_data <- golub[, 2:ncol(golub)]
# Perform hierarchical clustering with single linkage
hclust_single <- hclust(dist(gene_expression_data), method = "single")
# Plot dendrogram
plot(hclust_single, main = "Hierarchical Clustering (Single Linkage)", sub = "")
rect.hclust(hclust_single, h = 75, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_single <- cutree(hclust_single, h = 75)
# Display cluster sizes
table(clusters_single)
# Perform hierarchical clustering with complete linkage
hclust_complete <- hclust(dist(gene_expression_data), method = "complete")
# Plot dendrogram
plot(hclust_complete, main = "Hierarchical Clustering (Complete Linkage)", sub = "")
rect.hclust(hclust_complete, h = 140, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_complete <- cutree(hclust_complete, h = 140)
# Display cluster sizes
table(clusters_complete)
# Perform hierarchical clustering with average linkage
hclust_average <- hclust(dist(gene_expression_data), method = "average")
# Plot dendrogram
plot(hclust_average, main = "Hierarchical Clustering (Average Linkage)", sub = "")
rect.hclust(hclust_average, h = 100, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_average <- cutree(hclust_average, h = 100)
# Display cluster sizes
table(clusters_average)
# Calculate silhouette scores for each observation
silhouette_scores <- silhouette(clusters_complete, dist(gene_expression_data))
# Identify an observation with low silhouette score (indicating an outlier)
outlier <- which.min(silhouette_scores[, "sil_width"])
# Calculate the cluster distances
cluster_distances <- dist(gene_expression_data)
# Identify an observation with the maximum distance (indicating an outlier)
outlier <- which.max(cluster_distances)
# Display the identified outlier
cat("Identified Outlier:", outlier, "\n")
# Remove the outlier from the gene expression data
gene_expression_data_no_outlier <- gene_expression_data[-outlier, ]
# Perform hierarchical clustering on the data without the identified outlier
hclust_no_outlier <- hclust(dist(gene_expression_data_no_outlier), method = "complete")
# Plot dendrogram for the data without the identified outlier
plot(hclust_no_outlier, main = "Hierarchical Clustering (Complete Linkage) - No Identified Outlier", sub = "")
rect.hclust(hclust_no_outlier, h = 80, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels for the data without the identified outlier
clusters_no_outlier <- cutree(hclust_no_outlier, h = 80)
# Display cluster sizes for the data without the identified outlier
table(clusters_no_outlier)
# Calculate the cluster distances
cluster_distances <- dist(gene_expression_data)
# Identify an observation with the maximum distance (indicating an outlier)
outlier <- which.max(cluster_distances)
# Display the identified outlier
cat("Identified Outlier:", outlier, "\n")
# Remove the outlier from the gene expression data
gene_expression_data_no_outlier <- gene_expression_data[-outlier, ]
# Perform hierarchical clustering with average linkage on the data without the identified outlier
hclust_no_outlier <- hclust(cluster_distances, method = "average")
# Plot dendrogram for the data without the identified outlier
plot(hclust_no_outlier, main = "Hierarchical Clustering (Average Linkage) - No Identified Outlier", sub = "")
rect.hclust(hclust_no_outlier, h = 80, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels for the data without the identified outlier
clusters_no_outlier <- cutree(hclust_no_outlier, h = 80)
# Display cluster sizes for the data without the identified outlier
table(clusters_no_outlier)
# Display cluster sizes before removing the outlier
cat("Cluster Sizes Before Removing Outlier:\n")
table(clusters_complete)
# Display the identified outlier
cat("Identified Outlier:", outlier, "\n")
# Display cluster sizes after removing the outlier
cat("Cluster Sizes After Removing Outlier:\n")
table(clusters_no_outlier)
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Step 1: Compute the Similarity Matrix
k_neighbors <- 4
similarity_matrix <- knn(gene_expression_data, k = k_neighbors)
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Step 1: Compute the Similarity Matrix
k_neighbors <- 4
similarity_matrix <- knn(gene_expression_data, gene_expression_data, k = k_neighbors)
knitr::opts_chunk$set(echo = TRUE)
# Load the data
load("mnist_first2000.RData")
dim(mnist)
# Take just digits 1, 6, and 7 in the first 1000 observations as the training data
mnist.train <- mnist[1:1000,]
mnist.train <- mnist.train[mnist.train$Digit %in% c(1,6,7),]
# Take just digits 1, 6, and 7 in the second 1000 observations as the testing data
mnist.test <- mnist[1001:2000,]
mnist.test <- mnist.test[mnist.test$Digit %in% c(1,6,7),]
# Perform PCA on the training data and extract the first 20 PCs for both training and testing data
mnist.train.pca <- prcomp(mnist.train[,-1], center = TRUE, scale. = FALSE)
mnist.test.pca <- predict(mnist.train.pca, newdata = mnist.test[,-1])
# Extract the first 20 PCs for both training and testing data
mnist.train.pca <- mnist.train.pca$x[,1:20]
mnist.test.pca <- mnist.test.pca[,1:20]
# Define a function to calculate the Euclidean distance between two vectors
euclidean_distance <- function(x, y) {
sqrt(sum((x - y)^2))
}
# Define a function to implement the K Means algorithm
k_means <- function(data, k, max_iter = 1000) {
# Randomly assign each observation to one of the K clusters
cluster <- sample(1:k, nrow(data), replace = TRUE)
# Initialize the centroids as the mean of each cluster
centroids <- lapply(1:k, function(j) colMeans(data[cluster == j, , drop = FALSE]))
# Repeat until convergence or maximum number of iterations
for (i in 1:max_iter) {
# Compute the distance between each observation and each centroid
distances <- sapply(1:k, function(j) apply(data, 1, euclidean_distance, y = centroids[[j]]))
# Assign each observation to the cluster with the closest centroid
cluster <- apply(distances, 1, which.min)
# Update the centroids as the mean of each cluster
centroids <- lapply(1:k, function(j) colMeans(data[cluster == j, , drop = FALSE]))
}
# Return the final cluster assignments
return(as.vector(cluster))
}
# Applying K-Means on the PCA-transformed training data
k <- 3  # number of clusters
training_clusters <- k_means(mnist.train.pca, k)
training_clusters
mnist.train$Digit
# Create a contingency table
contingency_table_custom <- table(training_clusters, mnist.train$Digit)
# Display the contingency table
print(contingency_table_custom)
# Apply kmeans() on the PCA-transformed training data
kmeans_result <- kmeans(mnist.train.pca, centers = k, nstart = 20)
as.vector(kmeans_result$cluster)
# Compare the clustering results
contingency_table_kmeans <- table(kmeans_result$cluster, mnist.train$Digit)
# Display the contingency table
print(contingency_table_kmeans)
library(multtest)
data(golub)
# Extract gene expression data
gene_expression_data <- golub[, 2:ncol(golub)]
# Perform hierarchical clustering with single linkage
hclust_single <- hclust(dist(gene_expression_data), method = "single")
# Plot dendrogram
plot(hclust_single, main = "Hierarchical Clustering (Single Linkage)", sub = "")
rect.hclust(hclust_single, h = 75, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_single <- cutree(hclust_single, h = 75)
# Display cluster sizes
table(clusters_single)
# Perform hierarchical clustering with complete linkage
hclust_complete <- hclust(dist(gene_expression_data), method = "complete")
# Plot dendrogram
plot(hclust_complete, main = "Hierarchical Clustering (Complete Linkage)", sub = "")
rect.hclust(hclust_complete, h = 140, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_complete <- cutree(hclust_complete, h = 140)
# Display cluster sizes
table(clusters_complete)
# Perform hierarchical clustering with average linkage
hclust_average <- hclust(dist(gene_expression_data), method = "average")
# Plot dendrogram
plot(hclust_average, main = "Hierarchical Clustering (Average Linkage)", sub = "")
rect.hclust(hclust_average, h = 100, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_average <- cutree(hclust_average, h = 100)
# Display cluster sizes
table(clusters_average)
# Calculate the cluster distances
cluster_distances <- dist(gene_expression_data)
# Identify an observation with the maximum distance (indicating an outlier)
outlier <- which.max(cluster_distances)
# Display the identified outlier
cat("Identified Outlier:", outlier, "\n")
# Remove the outlier from the gene expression data
gene_expression_data_no_outlier <- gene_expression_data[-outlier, ]
# Perform hierarchical clustering with average linkage on the data without the identified outlier
hclust_no_outlier <- hclust(cluster_distances, method = "average")
# Plot dendrogram for the data without the identified outlier
plot(hclust_no_outlier, main = "Hierarchical Clustering (Average Linkage) - No Identified Outlier", sub = "")
rect.hclust(hclust_no_outlier, h = 80, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels for the data without the identified outlier
clusters_no_outlier <- cutree(hclust_no_outlier, h = 80)
# Display cluster sizes for the data without the identified outlier
table(clusters_no_outlier)
# Display cluster sizes before removing the outlier
cat("Cluster Sizes Before Removing Outlier:\n")
table(clusters_complete)
# Display the identified outlier
cat("Identified Outlier:", outlier, "\n")
# Display cluster sizes after removing the outlier
cat("Cluster Sizes After Removing Outlier:\n")
table(clusters_no_outlier)
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Step 1: Compute the Similarity Matrix
k_neighbors <- 4
similarity_matrix <- knn(gene_expression_data, gene_expression_data, k = k_neighbors)
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Compute the similarity matrix using the 4 nearest neighbors
k_neighbors <- 4
similarity_matrix <- knn(gene_expression_data, gene_expression_data, k = k_neighbors)
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Compute the similarity matrix using the 4 nearest neighbors
k_neighbors <- 4
similarity_matrix <- knn(gene_expression_data, gene_expression_data,
k = k_neighbors, cl= NULL)
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Compute the similarity matrix using the 4 nearest neighbors
k_neighbors <- 4
knn_result <- get.knn(gene_expression_data, k = k_neighbors)
# Extract the similarity matrix
similarity_matrix <- knn_result$nn.index
# Display the similarity matrix
similarity_matrix
# Step 2: Plot the Adjacency Matrix
heatmap(similarity_matrix, main = "Similarity Matrix Heatmap", xlab = "Observations", ylab = "Observations")
# Step 3: Compute the Laplacian Matrix and Perform Eigen-decomposition
degree_matrix <- diag(rowSums(similarity_matrix))
laplacian_matrix <- degree_matrix - similarity_matrix
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Compute the similarity matrix using the 4 nearest neighbors
k_neighbors <- 4
knn_result <- get.knn(gene_expression_data, k = k_neighbors)
# Extract the similarity matrix
similarity_matrix <- knn_result$nn.index
# Display the similarity matrix
similarity_matrix
# Step 2: Plot the Adjacency Matrix
heatmap(similarity_matrix, main = "Similarity Matrix Heatmap", xlab = "Observations", ylab = "Observations")
# Step 3: Compute the Laplacian Matrix and Perform Eigen-decomposition
degree_matrix <- diag(rowSums(similarity_matrix))
laplacian_matrix <- degree_matrix - as.matrix(similarity_matrix)  # Ensure similarity_matrix is a matrix
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Compute the similarity matrix using the 4 nearest neighbors
k_neighbors <- 4
knn_result <- get.knn(gene_expression_data, k = k_neighbors, method = "kd_tree")
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Compute the similarity matrix using the 4 nearest neighbors
k_neighbors <- 4
knn_result <- knn(gene_expression_data, k = k_neighbors)
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Compute the similarity matrix using the 4 nearest neighbors
k_neighbors <- 4
knn_result <- get.knn(gene_expression_data, k = k_neighbors)
# Extract the similarity matrix
similarity_matrix <- knn_result$nn.dist
# Display the similarity matrix
similarity_matrix
# Step 2: Plot the Adjacency Matrix
heatmap(similarity_matrix, main = "Similarity Matrix Heatmap", xlab = "Observations", ylab = "Observations")
# Step 3: Compute the Laplacian Matrix and Perform Eigen-decomposition
degree_matrix <- diag(rowSums(similarity_matrix))
laplacian_matrix <- degree_matrix - as.matrix(similarity_matrix)
knitr::opts_chunk$set(echo = TRUE)
# Load the data
load("mnist_first2000.RData")
dim(mnist)
# Take just digits 1, 6, and 7 in the first 1000 observations as the training data
mnist.train <- mnist[1:1000,]
mnist.train <- mnist.train[mnist.train$Digit %in% c(1,6,7),]
# Take just digits 1, 6, and 7 in the second 1000 observations as the testing data
mnist.test <- mnist[1001:2000,]
mnist.test <- mnist.test[mnist.test$Digit %in% c(1,6,7),]
# Perform PCA on the training data and extract the first 20 PCs for both training and testing data
mnist.train.pca <- prcomp(mnist.train[,-1], center = TRUE, scale. = FALSE)
mnist.test.pca <- predict(mnist.train.pca, newdata = mnist.test[,-1])
# Extract the first 20 PCs for both training and testing data
mnist.train.pca <- mnist.train.pca$x[,1:20]
mnist.test.pca <- mnist.test.pca[,1:20]
# Define a function to calculate the Euclidean distance between two vectors
euclidean_distance <- function(x, y) {
sqrt(sum((x - y)^2))
}
# Define a function to implement the K Means algorithm
k_means <- function(data, k, max_iter = 1000) {
# Randomly assign each observation to one of the K clusters
cluster <- sample(1:k, nrow(data), replace = TRUE)
# Initialize the centroids as the mean of each cluster
centroids <- lapply(1:k, function(j) colMeans(data[cluster == j, , drop = FALSE]))
# Repeat until convergence or maximum number of iterations
for (i in 1:max_iter) {
# Compute the distance between each observation and each centroid
distances <- sapply(1:k, function(j) apply(data, 1, euclidean_distance, y = centroids[[j]]))
# Assign each observation to the cluster with the closest centroid
cluster <- apply(distances, 1, which.min)
# Update the centroids as the mean of each cluster
centroids <- lapply(1:k, function(j) colMeans(data[cluster == j, , drop = FALSE]))
}
# Return the final cluster assignments
return(as.vector(cluster))
}
# Applying K-Means on the PCA-transformed training data
k <- 3  # number of clusters
training_clusters <- k_means(mnist.train.pca, k)
training_clusters
mnist.train$Digit
# Create a contingency table
contingency_table_custom <- table(training_clusters, mnist.train$Digit)
# Display the contingency table
print(contingency_table_custom)
# Apply kmeans() on the PCA-transformed training data
kmeans_result <- kmeans(mnist.train.pca, centers = k, nstart = 20)
as.vector(kmeans_result$cluster)
# Compare the clustering results
contingency_table_kmeans <- table(kmeans_result$cluster, mnist.train$Digit)
# Display the contingency table
print(contingency_table_kmeans)
library(multtest)
data(golub)
# Extract gene expression data
gene_expression_data <- golub[, 2:ncol(golub)]
# Perform hierarchical clustering with single linkage
hclust_single <- hclust(dist(gene_expression_data), method = "single")
# Plot dendrogram
plot(hclust_single, main = "Hierarchical Clustering (Single Linkage)", sub = "")
rect.hclust(hclust_single, h = 75, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_single <- cutree(hclust_single, h = 75)
# Display cluster sizes
table(clusters_single)
# Perform hierarchical clustering with complete linkage
hclust_complete <- hclust(dist(gene_expression_data), method = "complete")
# Plot dendrogram
plot(hclust_complete, main = "Hierarchical Clustering (Complete Linkage)", sub = "")
rect.hclust(hclust_complete, h = 140, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_complete <- cutree(hclust_complete, h = 140)
# Display cluster sizes
table(clusters_complete)
# Perform hierarchical clustering with average linkage
hclust_average <- hclust(dist(gene_expression_data), method = "average")
# Plot dendrogram
plot(hclust_average, main = "Hierarchical Clustering (Average Linkage)", sub = "")
rect.hclust(hclust_average, h = 100, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels
clusters_average <- cutree(hclust_average, h = 100)
# Display cluster sizes
table(clusters_average)
# Calculate the cluster distances
cluster_distances <- dist(gene_expression_data)
# Identify an observation with the maximum distance (indicating an outlier)
outlier <- which.max(cluster_distances)
# Display the identified outlier
cat("Identified Outlier:", outlier, "\n")
# Remove the outlier from the gene expression data
gene_expression_data_no_outlier <- gene_expression_data[-outlier, ]
# Perform hierarchical clustering with average linkage on the data without the identified outlier
hclust_no_outlier <- hclust(cluster_distances, method = "average")
# Plot dendrogram for the data without the identified outlier
plot(hclust_no_outlier, main = "Hierarchical Clustering (Average Linkage) - No Identified Outlier", sub = "")
rect.hclust(hclust_no_outlier, h = 80, border = "red")  # Example cut-off point
# Cut tree and obtain cluster labels for the data without the identified outlier
clusters_no_outlier <- cutree(hclust_no_outlier, h = 80)
# Display cluster sizes for the data without the identified outlier
table(clusters_no_outlier)
# Display cluster sizes before removing the outlier
cat("Cluster Sizes Before Removing Outlier:\n")
table(clusters_complete)
# Display the identified outlier
cat("Identified Outlier:", outlier, "\n")
# Display cluster sizes after removing the outlier
cat("Cluster Sizes After Removing Outlier:\n")
table(clusters_no_outlier)
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Compute the similarity matrix using the 4 nearest neighbors
k_neighbors <- 4
knn_result <- get.knn(gene_expression_data, k = k_neighbors)
# Extract the similarity matrix
similarity_matrix <- knn_result$nn.dist
# Display the similarity matrix
similarity_matrix
# Step 2: Plot the Adjacency Matrix
heatmap(similarity_matrix, main = "Similarity Matrix Heatmap", xlab = "Observations", ylab = "Observations")
# Step 3: Compute the Laplacian Matrix and Perform Eigen-decomposition
degree_matrix <- diag(similarity_matrix)
laplacian_matrix <- degree_matrix - as.matrix(similarity_matrix)
eigen_decomposition <- eigen(laplacian_matrix)
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Compute the similarity matrix using the 4 nearest neighbors
k_neighbors <- 4
knn_result <- get.knn(gene_expression_data, k = k_neighbors)
# Extract the similarity matrix
similarity_matrix <- knn_result$nn.dist
# Display the similarity matrix
similarity_matrix
# Step 2: Plot the Adjacency Matrix
heatmap(similarity_matrix, main = "Similarity Matrix Heatmap", xlab = "Observations", ylab = "Observations")
# Step 3: Compute the Laplacian Matrix and Perform Eigen-decomposition
degree_matrix <- diag(similarity_matrix)
laplacian_matrix <- degree_matrix - as.matrix(similarity_matrix)
eigen_decomposition <- eigen(laplacian_matrix, symmetric = TRUE)
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Compute the similarity matrix using the 4 nearest neighbors
k_neighbors <- 4
knn_result <- get.knn(gene_expression_data, k = k_neighbors)
# Extract the similarity matrix
similarity_matrix <- knn_result$nn.dist
# Display the similarity matrix
similarity_matrix
# Step 2: Plot the Adjacency Matrix
heatmap(similarity_matrix, main = "Similarity Matrix Heatmap", xlab = "Observations", ylab = "Observations")
# Step 3: Compute the Laplacian Matrix and Perform Eigen-decomposition
degree_matrix <- diag(similarity_matrix)
laplacian_matrix <- degree_matrix - as.matrix(similarity_matrix)
eigen_decomposition <- eigen(rowSums(laplacian_matrix), symmetric = TRUE)
# Assuming 'gene_expression_data' is your gene expression data matrix
library(FNN)
# Compute the similarity matrix using the 4 nearest neighbors
k_neighbors <- 4
knn_result <- get.knn(gene_expression_data, k = k_neighbors, method = "kd_tree")
library(umap)
install(umap)
install.packages(umap)
install.packages("umap")
library(umap)
umap.tuning = umap.defaults
umap.defaults$n_neighbors = 4
circles.umap = umap(golub, umap.defaults)
plot(circles.umap$layout, col = golub.cl)
setwd("/Users/abhithanvi/Desktop/Classes/XFall2023/STAT432/project")
